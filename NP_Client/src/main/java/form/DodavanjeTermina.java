/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package form;

import controller.UIController;
import domen.Frizer;
import domen.Korisnik;
import domen.OpstiDomenskiObjekat;
import domen.Salon;
import domen.Termin;
import domen.Usluga;
import domen.Zakazivanje;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mihajlo Popovic
 */
public class DodavanjeTermina extends javax.swing.JDialog {

    /**
     * Creates new form DodavanjeTermina
     */
    private Salon salon;
    private Zakazivanje zakazivanje;

    public DodavanjeTermina(VlasnikMainForm aThis, boolean par, Salon salon) {

        super(aThis, par);
        this.salon = salon;
        initComponents();
        zakazivanje = vratiZakazivanje();
        populateTable();
        populateComboBox();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtDatum = new javax.swing.JTextField();
        btnDodajTermin = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        cbFrizer = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        cbUsluga = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("Dodaj Termin");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Vreme");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Datum");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Frizer");

        btnDodajTermin.setText("Dodaj Termin");
        btnDodajTermin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDodajTerminActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Vreme", "Datum", "Slobodan"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel5.setText("Trenutni termini");

        jLabel6.setText("(YYYY-mm-dd)");

        jLabel7.setText("(hh:mm)");

        jLabel8.setText("Usluga");

        cbUsluga.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sisanje", "Feniranje", "Brijanje", "Farbanje" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(68, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 620, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40))
            .addGroup(layout.createSequentialGroup()
                .addGap(131, 131, 131)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnDodajTermin, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel7)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cbUsluga, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbFrizer, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtDatum))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addGap(187, 187, 187))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDatum, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel6))
                .addGap(63, 63, 63)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(cbUsluga, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbFrizer, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(32, 32, 32)
                .addComponent(btnDodajTermin, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDodajTerminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDodajTerminActionPerformed
        // TODO add your handling code here:
        try {
            Termin termin = new Termin(this.salon);
            termin.setVreme((String) jComboBox1.getItemAt(0));
            String dateStr = txtDatum.getText();
            System.out.println(dateStr);

            try {
                SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
                Date date = format.parse(dateStr);
                System.out.println(termin.getDatum(date));
                if (date.before(new Date())) {
                    JOptionPane.showMessageDialog(this, "Unesite buduci datum");
                    return;
                }
                termin.setDatum(date);
            } catch (ParseException e) {
                e.printStackTrace();
            }

            String usluga = (String) cbUsluga.getItemAt(0);
            switch (usluga) {
                case "Sisanje":
                    termin.setUsluga(new Usluga(1));

                    break;
                case "Feniranje":
                    termin.setUsluga(new Usluga(2));

                    break;
                case "Brijanje":
                    termin.setUsluga(new Usluga(3));
                    break;
                case "Farbanje":
                    termin.setUsluga(new Usluga(4));
                    break;
                default:
                    throw new AssertionError();
            }
            termin.setUsluga(new Usluga(1));
            termin.setFrizer((String) cbFrizer.getItemAt(0));
            termin.setSlobodan(true);
            termin.setKorisnik(new Korisnik(1, "", "", "", ""));

            System.out.println("Termin za dodavanje: " + termin);
            if (!proveriTermin(termin)) {
                OpstiDomenskiObjekat v = UIController.getInstance().zapamtiTermin(termin);
                JOptionPane.showMessageDialog(this, "Uspesno dodat termin!");
                dispose();
            } else {
                JOptionPane.showMessageDialog(this, "Postoji termin u unetom vremenu");
                dispose();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnDodajTerminActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDodajTermin;
    private javax.swing.JComboBox<String> cbFrizer;
    private javax.swing.JComboBox<Object> cbUsluga;
    private javax.swing.JComboBox<Object> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtDatum;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        try {
            Termin termin = new Termin();
            termin.setSalon(salon);
            List<OpstiDomenskiObjekat> slobodniTermini = UIController.getInstance().allTermini(termin);
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);
            for (OpstiDomenskiObjekat odo : slobodniTermini) {
                Termin t = (Termin) odo;
                Object[] row = new Object[3];
                row[0] = t.getVreme();
                row[1] = t.getDatum();
                row[2] = t.isSlobodan();
                model.addRow(row);

            }

        } catch (Exception ex) {
            Logger.getLogger(DodavanjeTermina.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private boolean proveriTermin(Termin termin) {

        try {
            List<OpstiDomenskiObjekat> termini = UIController.getInstance().allTermini(termin);
            List<Termin> vremena = new ArrayList<Termin>();
            for (OpstiDomenskiObjekat odo : termini) {
                Termin t = (Termin) odo;
                
                vremena.add(t);

            }
            for (Termin v: vremena) {
                if(termin.getVreme().equals(v.getVreme()) && termin.getDatum().equals(v.getDatum())) {
                    return true;
                }
            } return false;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return true;
    }

    private void populateComboBox() {
        Frizer frizer = new Frizer();
        frizer.setSalon(salon);
        try {
            List<OpstiDomenskiObjekat> listaFrizera = UIController.getInstance().vratiSveFrizere(frizer);
            if (listaFrizera.size() == 0 || listaFrizera == null) {
                cbFrizer.removeAllItems();
                cbFrizer.setModel(new DefaultComboBoxModel(listaFrizera.toArray()));
                cbFrizer.addItem("NEMA UBACENIH FRIZERA");

            } else {
                cbFrizer.removeAllItems();
                cbFrizer.setModel(new DefaultComboBoxModel());
                for (OpstiDomenskiObjekat odo : listaFrizera) {
                    Frizer f = (Frizer) odo;
                    cbFrizer.addItem(f.getIme());

                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        jComboBox1.removeAllItems();
        List<String> termini30 = new ArrayList<String>();
        termini30.add("9:00");
        termini30.add("9:30");
        termini30.add("10:00");
        termini30.add("10:30");
        termini30.add("11:00");
        termini30.add("11:30");
        termini30.add("12:00");
        termini30.add("12:30");
        termini30.add("13:00");
        termini30.add("13:30");
        termini30.add("14:00");
        termini30.add("14:30");
        termini30.add("15:00");
        termini30.add("15:30");
        termini30.add("16:00");
        termini30.add("16:30");
        termini30.add("17:00");
        termini30.add("17:30");
        termini30.add("18:00");
        termini30.add("18:30");
        termini30.add("19:00");
        termini30.add("19:30");
        termini30.add("20:00");
        termini30.add("20:30");
        List<String> termini45 = new ArrayList<String>();
        termini45.add("9:00");
        termini45.add("9:45");
        termini45.add("10:30");
        termini45.add("11:15");
        termini45.add("12:00");
        termini45.add("12:45");
        termini45.add("13:15");
        termini45.add("14:00");
        termini45.add("14:45");
        termini45.add("15:15");
        termini45.add("16:00");
        termini45.add("16:45");
        termini45.add("17:15");
        termini45.add("18:00");
        termini45.add("18:45");
        termini45.add("19:00");
        termini45.add("19:45");
        termini45.add("20:15");
        List<String> termini60 = new ArrayList<String>();
        termini60.add("9:00");
        termini60.add("9:00");
        termini60.add("10:00");
        termini60.add("11:00");
        termini60.add("12:00");
        termini60.add("13:00");
        termini60.add("14:00");
        termini60.add("15:00");
        termini60.add("16:00");
        termini60.add("17:00");
        termini60.add("18:00");
        termini60.add("19:00");
        termini60.add("20:00");

        switch (zakazivanje.getTrajanje()) {
            case 30:
                jComboBox1.setModel(new DefaultComboBoxModel<>(termini30.toArray()));
                break;
            case 45:
                jComboBox1.setModel(new DefaultComboBoxModel<>(termini45.toArray()));
                break;
            case 60:
                jComboBox1.setModel(new DefaultComboBoxModel<>(termini60.toArray()));
                break;

            default:
                throw new AssertionError();
        }

    }

    private Zakazivanje vratiZakazivanje() {
        Zakazivanje z = new Zakazivanje();
        Zakazivanje zak = null;
        z.setSalon(this.salon);
        try {
            zak = (Zakazivanje) UIController.getInstance().vratiZakazivanje(z);
            System.out.println("Podaci o zakazivanju salona" + zak);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return zak;
    }
}
